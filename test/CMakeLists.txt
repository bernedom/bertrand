cmake_minimum_required(VERSION 3.15)

find_program(CONAN conan)
if(NOT CONAN)
  message(WARNING "Conan not found. Skipping tests")
  return()
endif()

if(CONAN_EXPORTED)
  include(${PROJECT_BINARY_DIR}/conanbuildinfo.cmake)
  conan_basic_setup(TARGETS)
else()
  if(NOT EXISTS "${CMAKE_CURRENT_BINARY_DIR}/conan.cmake")
    message(
      STATUS
        "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")
    file(
      DOWNLOAD
      "https://raw.githubusercontent.com/conan-io/cmake-conan/v0.15/conan.cmake"
      "${CMAKE_CURRENT_BINARY_DIR}/conan.cmake")
  endif()

  include(${CMAKE_CURRENT_BINARY_DIR}/conan.cmake)
  conan_cmake_run(CONANFILE conanfile.txt BASIC_SETUP CMAKE_TARGETS BUILD
                  missing)
endif()

# Because of the location of conan.cmake the FindCatch2.cmake generated by conan
# is not found on windows using msvc
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR})

find_package(Catch2 REQUIRED)

add_executable(bertrand_tests)
target_sources(
  bertrand_tests PRIVATE src/Catch2Main.cc src/text_tests.cc
                         src/bertrand_tests.cc src/in_operator_tests.cc)

target_include_directories(
  bertrand_tests PRIVATE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
                         $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>)
target_link_libraries(bertrand_tests PRIVATE Catch2::Catch2)

target_compile_features(bertrand_tests PRIVATE cxx_std_17)

target_compile_options(
  bertrand_tests
  PRIVATE
    $<$<CXX_COMPILER_ID:MSVC>:/std:c++17>
    $<$<CXX_COMPILER_ID:MSVC>:/W4>
    $<$<CXX_COMPILER_ID:MSVC>:/WX>
    $<$<CXX_COMPILER_ID:MSVC>:/DBERTRAND_CONTRACTS_ARE_EXCEPTIONS>
    $<$<CXX_COMPILER_ID:MSVC>:/DBERTRAND_ENABLE_CONTRACTS>
    $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wall>
    $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Werror>
    $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-pedantic>
    $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-DBERTRAND_CONTRACTS_ARE_EXCEPTIONS>
    $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-DBERTRAND_ENABLE_CONTRACTS>
    $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-DBERTRAND_DISABLE_STACKTRACE>)

add_executable(failing_contract)
target_compile_features(failing_contract PRIVATE cxx_std_17)
target_sources(failing_contract PRIVATE src/failing_contract.cc)

target_include_directories(
  failing_contract PRIVATE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
                           $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>)

# the stacktrace test only works properly with gcc, because clang does not
# supprt -export-dynamic and thus demangling of the symbols might fail
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  add_executable(stacktrace_tests)
  target_link_libraries(stacktrace_tests PRIVATE Catch2::Catch2)
  target_compile_features(stacktrace_tests PRIVATE cxx_std_17)
  target_sources(stacktrace_tests
                 PRIVATE stacktrace_test/src/stacktrace_test.cc)

  target_include_directories(
    stacktrace_tests
    PRIVATE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
            $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>)

  target_compile_options(
    stacktrace_tests
    PRIVATE $<$<CXX_COMPILER_ID:GNU>:-Wall>
            $<$<CXX_COMPILER_ID:GNU>:-Werror>
            $<$<CXX_COMPILER_ID:GNU>:-pedantic>
            $<$<CXX_COMPILER_ID:GNU>:-DBERTRAND_CONTRACTS_ARE_EXCEPTIONS>
            $<$<CXX_COMPILER_ID:GNU>:-DBERTRAND_ENABLE_CONTRACTS>)

  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_link_options(stacktrace_tests PRIVATE
                        $<$<CXX_COMPILER_ID:GNU,Clang>:-export-dynamic>)
  endif()
  add_test(NAME stacktrace_tests COMMAND stacktrace_tests)
endif()

add_test(NAME bertrand_tests COMMAND bertrand_tests)
